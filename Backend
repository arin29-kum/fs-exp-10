//config/database.js//
// config/database.js
const { Sequelize } = require('sequelize');
const sequelize = new Sequelize(process.env.DB_NAME, process.env.DB_USER, process.env.DB_PASS, {
  host: process.env.DB_HOST,
  dialect: 'postgres',
  logging: false,
});
module.exports = sequelize;
//3. Models (User, Post, Comment, Like)//
models/User.js
const { DataTypes, Model } = require('sequelize');
const sequelize = require('../config/database');

class User extends Model {}
User.init({
  username: { type: DataTypes.STRING, unique: true, allowNull: false },
  email: { type: DataTypes.STRING, unique: true, allowNull: false },
  passwordHash: { type: DataTypes.STRING, allowNull: false },
  bio: { type: DataTypes.TEXT }
}, { sequelize, modelName: 'user' });

module.exports = User;
//models/Post.js//
const { DataTypes, Model } = require('sequelize');
const sequelize = require('../config/database');
const User = require('./User');

class Post extends Model {}
Post.init({
  content: { type: DataTypes.TEXT, allowNull: false },
  imageUrl: { type: DataTypes.STRING, allowNull: true }
}, { sequelize, modelName: 'post' });

Post.belongsTo(User, { as: 'author' });
User.hasMany(Post, { foreignKey: 'authorId' });

module.exports = Post;
//models/Comment.js//
const { DataTypes, Model } = require('sequelize');
const sequelize = require('../config/database');
const User = require('./User');
const Post = require('./Post');

class Comment extends Model {}
Comment.init({
  text: { type: DataTypes.TEXT, allowNull: false }
}, { sequelize, modelName: 'comment' });

Comment.belongsTo(User, { as: 'author' });
Comment.belongsTo(Post);
Post.hasMany(Comment);

module.exports = Comment;
//models/Like.js//
const { DataTypes, Model } = require('sequelize');
const sequelize = require('../config/database');
const User = require('./User');
const Post = require('./Post');

class Like extends Model {}
Like.init({}, { sequelize, modelName: 'like' });
Like.belongsTo(User);
Like.belongsTo(Post);
Post.hasMany(Like);
module.exports = Like;
//4. Auth helpers & middleware//
utils/auth.js

const jwt = require('jsonwebtoken');
const SECRET = process.env.JWT_SECRET;

function signToken(user) {
  return jwt.sign({ id: user.id, username: user.username }, SECRET, { expiresIn: '7d' });
}

function verifyToken(token) {
  return jwt.verify(token, SECRET);
}

module.exports = { signToken, verifyToken };
//middleware/auth.js//
const { verifyToken } = require('../utils/auth');

module.exports = (req, res, next) => {
  const auth = req.headers.authorization;
  if (!auth) return res.status(401).json({ message: 'No token' });
  const token = auth.split(' ')[1];
  try {
    const payload = verifyToken(token);
    req.user = payload; // contains id, username
    return next();
  } catch (err) {
    return res.status(401).json({ message: 'Invalid token' });
  }
};
//5. S3 presigned URL for uploads//
//services/s3.js//
const AWS = require('aws-sdk');
const s3 = new AWS.S3({
  region: process.env.AWS_REGION,
  credentials: {
    accessKeyId: process.env.AWS_KEY,
    secretAccessKey: process.env.AWS_SECRET
  }
});

function getPresignedUrl(key, contentType='image/jpeg') {
  const params = {
    Bucket: process.env.S3_BUCKET,
    Key: key,
    Expires: 60, // seconds
    ContentType: contentType,
    ACL: 'public-read'
  };
  return s3.getSignedUrlPromise('putObject', params);
}

module.exports = { getPresignedUrl };
//6. Routes (Auth, Posts, Comments)//
routes/auth.js (register/login)

const express = require('express');
const bcrypt = require('bcrypt');
const User = require('../models/User');
const { signToken } = require('../utils/auth');
const router = express.Router();

router.post('/register', async (req, res) => {
  const { username, email, password } = req.body;
  const hash = await bcrypt.hash(password, 10);
  const user = await User.create({ username, email, passwordHash: hash });
  const token = signToken(user);
  res.json({ token, user: { id: user.id, username: user.username } });
});

router.post('/login', async (req, res) => {
  const { email, password } = req.body;
  const user = await User.findOne({ where: { email }});
  if (!user) return res.status(401).json({ message: 'Invalid' });
  const ok = await bcrypt.compare(password, user.passwordHash);
  if (!ok) return res.status(401).json({ message: 'Invalid' });
  res.json({ token: signToken(user), user: { id: user.id, username: user.username }});
});

module.exports = router;
routes/posts.js (create, read, update, delete, like)

const express = require('express');
const Post = require('../models/Post');
const Comment = require('../models/Comment');
const Like = require('../models/Like');
const auth = require('../middleware/auth');
const router = express.Router();

router.post('/', auth, async (req, res) => {
  const post = await Post.create({ content: req.body.content, imageUrl: req.body.imageUrl, authorId: req.user.id });
  res.json(post);
});

router.get('/', async (req, res) => {
  const posts = await Post.findAll({
    include: [
      { model: require('../models/User'), as: 'author', attributes: ['id','username'] },
      { model: Comment, include: [{ model: require('../models/User'), as: 'author', attributes: ['id','username'] }] },
      { model: Like }
    ],
    order: [['createdAt','DESC']]
  });
  res.json(posts);
});

router.post('/:id/like', auth, async (req, res) => {
  const postId = req.params.id;
  // toggle like
  const existing = await Like.findOne({ where: { postId, userId: req.user.id }});
  if (existing) {
    await existing.destroy();
    return res.json({ liked: false });
  }
  await Like.create({ postId, userId: req.user.id });
  res.json({ liked: true });
});

module.exports = router;
routes/comments.js

const express = require('express');
const auth = require('../middleware/auth');
const Comment = require('../models/Comment');
const router = express.Router();

router.post('/:postId', auth, async (req, res) => {
  const comment = await Comment.create({ text: req.body.text, postId: req.params.postId, authorId: req.user.id });
  res.json(comment);
});

router.get('/:postId', async (req, res) => {
  const comments = await Comment.findAll({ where: { postId: req.params.postId }, include: [{ model: require('../models/User'), as: 'author', attributes: ['id','username'] }]});
  res.json(comments);
});

module.exports = router;
//7. server.js entry//
require('dotenv').config();
const express = require('express');
const sequelize = require('./config/database');
const cors = require('cors');

const authRoutes = require('./routes/auth');
const postsRoutes = require('./routes/posts');
const commentsRoutes = require('./routes/comments');
const { getPresignedUrl } = require('./services/s3');

const app = express();
app.use(cors());
app.use(express.json());

app.use('/auth', authRoutes);
app.use('/posts', postsRoutes);
app.use('/comments', commentsRoutes);

// presigned URL endpoint
app.get('/upload-url', async (req, res) => {
  const key = `images/${Date.now()}-${Math.random().toString(36).slice(2,8)}`;
  const url = await getPresignedUrl(key, req.query.contentType);
  res.json({ url, key, publicUrl: `https://${process.env.S3_BUCKET}.s3.${process.env.AWS_REGION}.amazonaws.com/${key}` });
});

async function start(){
  await sequelize.sync({ alter: true });
  app.listen(process.env.PORT || 5000, () => console.log('Listening'));
}
start();
